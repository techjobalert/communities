.fl-l{:style => "width:900px"}
  = render :partial => 'partials/webrecorder', :inline => true, :locals => {:uuid => @uuid}
  .fl-r
    = render :partial => "layouts/video_viewer", :locals => {:attachment => @a_video, :w => 920,:h=>600, :preload => true, :features => "progress,duration,fullscreen", :timing => true}, :inline => true
  .clearfix

  .b-recorder
    .b-recorder__tools
      = button_tag(:class => 'link mv-play', :type => 'button', :onclick => "videoPlayer.play()", :disabled => true) do
        = content_tag(:strong, 'Movie Play')
      = button_tag(:class => 'link rec-start',:type => 'button', :disabled => true) do
        = content_tag(:strong, 'Record Start')
      = button_tag(:class => 'link rec-save',:type => 'button', :disabled => true) do
        = content_tag(:strong, 'Record Save')

    #recorder-status.status Loading...
    .clearfix

  .b-upload-item
    .b-upload-item__title.hr Choose thumbnail

  .b-upload-item__presenter-video

    = label_tag "pos_br", "" do
      = radio_button_tag "pos", "br", true, :title => "bottom right"
      = image_tag "video/presenter-video-rb.jpg"

    = label_tag "pos_tl", "" do
      = radio_button_tag "pos", "tl", false, :title => "top left"
      = image_tag "video/presenter-video-lt.jpg"

    = label_tag "pos_mr", "" do
      = radio_button_tag "pos", "mr", false, :title => "middle right"
      = image_tag "video/presenter-video-r.jpg"

    = label_tag "pos_ml", "" do
      = radio_button_tag "pos", "ml", false, :title => "middle left"
      = image_tag "video/presenter-video-l.jpg"

:javascript
  $("#recorder").appendTo(".mejs-mediaelement")
  var videoPlayer = new MediaElementPlayer('#videoPlayer'),
      _playbackPoints = [],
      currentPos = 0,
      syncBool = false,
      presync = false,
      canPlay = false,
      innerTimer = 0,
      innerIntervarTimer,
      pauseCallback = function(){
        if (currentStopTime) videoPlayer.media.setCurrentTime(currentStopTime);
        innerTimer = 0;
        innerIntervarTimer = setInterval(function(){ innerTimer = parseFloat((innerTimer + 0.1).toFixed(3))}, 100);
        if (_playbackPoints.length) currentPos++;
        $(".mv-play").removeAttr('disabled');
      },
      playCallback = function(){
        clearInterval(innerIntervarTimer);
        if (currentPos){
          var p = currentPos-1, t = videoPlayer.media.currentTime;
          if (currentStopTime){
            t = currentStopTime;
            currentStopTime = undefined;
          }
          _playbackPoints[p]['stop'] = videoPlayer.media.duration;
          _playbackPoints[p]['duration'] = videoPlayer.media.duration - _playbackPoints[p]['start'];
          _playbackPoints[p]['pause_duration'] = innerTimer; // secondsToHms(innerTimer);
        }
        _playbackPoints.push({start: _playbackPoints.length ? t : 0});
        $(".mv-play").attr("disabled","true");
      },
      endedCallback = function(){
        stopSync();
      },
      prestartSync = function(){
        if (presync || !canPlay) return false;
        presync = true;
        var duration = 5,
            el = document.getElementById("recorder-status"),
            interval = setInterval( function(){
              duration--;
              el.innerHTML = "Please wait " + duration + " sec";
              $(el).blinkText();
              if (duration == 0){
                clearInterval(interval);
                setTimeout(function() { startSync(); }, 1000);
              }
            }
            , 1000 );
      },
      canPlayCallback = function(){
        canPlay = true;
        $(".rec-start").removeAttr('disabled');
      },
      startSync = function(){
        videoPlayer.play();
        startRecord();
        $(".rec-start").attr('disabled','true');
        $(".rec-save").removeAttr('disabled');
        syncBool = true;
        presync = false;
      },
      stopSync = function(){
        videoPlayer.pause();
        clearInterval(innerIntervarTimer);
        var t = videoPlayer.media.currentTime;
        var p = _playbackPoints.length - 1;
        _playbackPoints[p]['stop'] = t;
        _playbackPoints[p]['duration'] = t - _playbackPoints[p]['start'];
        _playbackPoints[p]['pause_duration'] = innerTimer; // secondsToHms(innerTimer);

        stopRecord();
        $(".rec-save").attr('disabled','true');
        $(".rec-start").removeAttr('disabled');
        syncBool = false;
        playbackPoints = _playbackPoints;
        _playbackPoints, innerIntervarTimer = [], undefined;
        videoPlayer.media.setCurrentTime(0);
        mergeFunc();
        $(".mv-play").attr("disabled","true");
        $(".rec-start").attr("disabled","true");
      },
      mergeFunc = function(){
        var data = {  video_id: "#{@a_video.id}",
                      record_file_name: recordingFileName,
                      playback_points: playbackPoints,
                      position: $("input[type=radio]:checked").val()};
        $.ajax({
          url: "#{item_merge_presenter_video_url(@item)}",
          type: "POST",
          dataType: "json",
          data: data,
          success: function(data){
            eval(data);
          }
        });
      };

  //removing play/pause button
  //$(".mejs-overlay-play").remove();
  // disable controls
  //videoPlayer.disableControls();

  document.getElementsByClassName("rec-start")[0].addEventListener('click', function(){
      prestartSync();
    }
    ,false);

  document.getElementsByClassName("rec-save")[0].addEventListener('click', function(){
      stopSync();
    }
    ,false);



  MediaElement('videoPlayer', {success: function(me, domObject) {
    me.addEventListener("pause", pauseCallback);
    me.addEventListener("play",  playCallback);
    me.addEventListener("ended", endedCallback);
    me.addEventListener("canplay", canPlayCallback);
  }});