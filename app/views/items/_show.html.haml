- content_for :title, @item.title

.content
  %h1
    - unless @item.published?
      %span.label{:class => "#{@item.state}"}= @item.state
    = item.title
  .share= render :partial => "layouts/share", :locals => {:item => @item}
  .clear

  .tools.short
    .items
      %ul
        - item.contributors.each do |contributor|
          %li
            .item
              = link_to image_tag(contributor.avatar_url(:thumb_60), :class => 'popup-user-info', :id => "popup-user-#{contributor.id}"), user_path(contributor)
              = link_to text_with_br(contributor.full_name), user_path(contributor), :class => "title"

    - if current_user and item.user.id != current_user.id
      - if not current_user.following?(item)
        = link_to "", item_follow_path(item), :method => :post, :remote => true, :class => "btn follow-item follow-item-#{item.id}"
      - else
        = link_to "", item_unfollow_path(item), :method => :delete, :remote => true, :class => "btn unfollow-item follow-item-#{item.id}"

    - if item.user == current_user
      = link_to "", edit_item_path(item), :class => "btn edit-item pjax"
      .btn.set-preview

      - content_for :popup_set_preview do
        .b-popup-set-preview.popup-container.top
          .container
            = form_for '/' do |f|
              %ul
                %li
                  = f.radio_button "radio", "1"
                  = label '_radio', '1', 'Show at most this number of pages', :class => 'checked'
                  = f.text_field ''
                %li
                  = f.radio_button "radio", "2"
                  = label '_radio', '2', 'Show at most this number of pages'
                  = f.text_field ''
                %li
                  = f.radio_button "radio", "3"
                  = label '_radio', '3', 'Show at most this number of pages'
                  = f.text_field ''
            %p
              %strong Note:
              Show at most this number of pages Show at most thiser of pages

          .corner

    - elsif user_signed_in? && item.paid? && !item.purchased?(current_user)
      = link_to "", orders_path, :remote => true, :id => "account-form-dialog", :class => "btn buy-item", :method => :post


  - unless @a_video
    .text.pic
      = image_tag('/assets/logo.png', :width => '200')
      %h2= @item.title
      .body= simple_format @item.description

      = image_tag '/assets/tmp/p4.png', :class => 'preview'
      .clear

      - if @a_pdf
        .attachment-pdf
          - if @a_pdf.file_processing == true
            %i Your attached pdf will be placed here after processings
          - elsif not @a_pdf.blank?
            - pdf = @item.paid_view?(current_user)
            -if pdf
              = render :partial => "layouts/pdf_viewer", :locals => { :attachment => pdf}

  - if @a_video
    .text.video
      .preview
        - if @a_video.file_processing == true
          .attachment-videoa
            %i Your attachment will be placed here after processings
        - elsif not @a_video.nil?
          .attachment-video
            - video = @item.paid_view?(current_user)
            -if video
              = render :partial => "layouts/video_viewer", :locals => {:attachment => video}

      .body
        = image_tag('/assets/logo.png', :width => '200')
        %h2= @item.title

        = @item.description
      .clear

      - if @a_pdf
        - if @a_pdf.file_processing == true
          .attachment-pdf
            %i
              Your attached pdf will be placed here after processings
        - elsif not @a_pdf.blank?
          .attachment-pdf
            - pdf = @item.paid_view?(current_user)
            -if pdf
              = render :partial => "layouts/pdf_viewer", :locals => { :attachment => pdf}

#comments.b-comments
  %h3 Comments
  .b-comments-panel
    - if user_signed_in?
      = link_to '', '#', :class => 'btn new-comment'
      .b-comments-form#comment-form
        = render :partial => "comments/form", :locals => {:commentable => @item, :url => item_comments_path(@item)}
    %ul
      - if @item.comment_threads.present?
        - @item.comment_threads.each do |comment|
          = render :partial => "comments/comment", :locals => {:comment => comment}
      .clear

- if user_signed_in? && item.paid? && !item.purchased?(current_user)
  %div{ :id => "account-form", :title=>"Buy item", :style => "display: none" }
    .b-buy-item-window
      .left-side
        .pay-pal-form
          = form_tag create_transaction_orders_path, :remote => true do
            = hidden_field_tag "order[item_id]", @item.id
            .form-container

        .b-buy-item-window-spinner
      .right-side
        %p
          %b Item:
          = "\"#{item.title}\""
        %p
          %b Price:
          = "#{item.price}$"

  :javascript
    function initPayPalForm(){
      $("#account-form:ui-dialog").dialog ("destroy");

      $( "#account-form" ).dialog({
        resizable: false,
        autoOpen: false,
        width: 700,
        modal: true,
        buttons: {
          "Validate card": function() {
            if ($("#account-form form").valid())
              $.post(
                "#{card_verification_orders_path}",
                $('#account-form form').serialize(),
                function(data){
                  showHideNotice(data.type, data.message);
                });
          },
          "Buy item": function() {
            if ($("#account-form form").valid()){
              $('#account-form form').submit();
              $(".ui-dialog-buttonset button").attr("disabled","disabled").addClass("ui-state-disabled");
              $("#account-form.ui-dialog-content .b-buy-item-window-spinner").fadeIn();
              }
          },
          Cancel: function() {
            $( this ).dialog( "close" );
          }
        }
      });

      var states;

      $('#pay_account_state').parent().hide();

      states = $('#pay_account_state').html();

      $('#pay_account_country').change(function() {
        var country, escaped_country, options;
        country = $('#pay_account_country :selected').text();
        escaped_country = country.replace(/([ #;&,.+*~\':"!^$[\]()=>|\/@])/g, '\\$1');
        options = $(states).filter("optgroup[label='" + escaped_country + "']").html();
        if (options) {
          $('#pay_account_state').html(options);
          return $('#pay_account_state').parent().show();
        } else {
          $('#pay_account_state').empty();
          return $('#pay_account_state').parent().hide();
        }
      });

      $(".pay-pal-form form").jquery_validate({
        errorElement: "em",
        errorPlacement: function(error, element) {
            error.appendTo( element.closest("p").find(".error_container") );
          },
        rules: {
          "pay_account[verification_value]": {
            required: true,
            number: true,
            minlength: 3,
            maxlength: 4
          },
          "pay_account[number]":{
            required: true,
            number: true,
            minlength: 13,
            maxlength: 16
          }
        }
      });
    }

:javascript
  $(".new-comment").on("click", function(){
    $("form#new_comment").submit();
    return false;
  })

  changeNavigationTab(".tab-item");